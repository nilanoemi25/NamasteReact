https://github.com/namastedev/namaste-react 

Episode 2 Igniting the APP 

If we were to create a REACT app then that is already ignited. It uses Webpack and Babel as a bundler in the background. 

We want to learn to ignite from scratch. 

NPM is a package manager. Not called Node Package Manager 
We want to use it in our programm to manage all the packages that we will install. 
Sometimes packages are also known as dependencies. 
Our project is dependent on a lot of packages/dependencies. 
NPM will manage these, their versions etc. It will take care of things inside the package.json


npm - init 
This will create a package.json. What is this package.json? 
Package.json file is a configuration for our NPM. 

START installing Dependencies 

The most important package is a bundler, to compress our whole code before it can be sent to production. Webpack/Parcel/Vit 

It will bundle our code together so that it can be shipped to production. 

Akshay is using Parcel for this project.  Parsel will give the muscles to our skeleton app. 

To install dependency via NPM: 
npm install -D nameofpackage

Two kind of dependencies an App can have: 
1. Dev dependency - It is generally required in a development phaze
2. Normal dependency - used in production 

Difference between ^ and ~ infront of the dependency. 
Possible interview question.
~ is major updates only 
^ all minor updates and is safer option to use so it wont break the app

Package-lock.json keeps track of the exact version being used in the app. 
Interview Question! 

Package-lock.json locks the package and keeps the exact details of it. Doesnt have a ^ or ~. 

Issue: It's working on local but not working on product!: 
'integrity' To avoid it the package-lock keeps a hash to ensure that the same version is deployed to production. 

Package-lock.json: 
Keeps a track of all the exact versions of all the dependencies. 

Node_Module contains all the code we fetched from NPM. 
Node Modules is kind of like a database, that contains the Data needed by the dependency. It's huge! 
node modules meme :D 

Transitive Dependencies:
Parcel is our dependency, but Parcel has it's own dependencies and they have their dependencies 

How is Parcel managing all the transitive dependencies? 

Every dependency has it's own package.json. 

If you have package.json and package.lock.json you can recreate all node modules. We dont upload node_modules to github. 

npm - install 
to recreate node_modules 

Just like we have NPM, we also have NPX means executing a package. 
NPM for installing, NPX for executing, 

npx anypackagename 

to quit executing: Ctrl + C 

Another way to get React in to our app is via NPM ( instead of CDN). 
CDN is not the preferred way of bringining react in to product. 
It is a costly operation. 
We want to most update version of react 

npm install react ( no -D!!)
npm i react-dom 

use import to bring in React from node modules. And same for ReactDOM 

Parceljs.org Read Parcel documentation  
This will help in system design interview 

NPM automatically generated an entry point in package.json called MAIN. 
However when executing through NPX, we give the entry point via terminal, so to avoid error the MAIN from NPM needs to be deleted. 

To create a production (build) ready app: 
npx parcel build index.html 

Go to Browserslist.dev to check what versions will be supported. 
You have to configure your own list which takes an array in the package.json file. 

Episode 3

Run project by executing: npx parcel index.html 
This will create a development build up and host it on local host. 

Let us create a script(configure a script) so we dont have to write NPX each time to start. 

"start": "parcel index.html", DEV MODE 
"build": "parcel build index.html" PRODUCTION MODE

npm run nameofscript 
OR 
npm nameofscript (for start(keyword) only)

If you give attributes to JSX, you must use camelcase, unlike in HTML. 

Babel transpiles JSX to React.createElement, which turns in to a JS Object which then is rendered in to HTML Element. 

React Component - everything is a React Component
Two ways: 
Class based Component OLD WAY 
Functional Component NEW WAY 

Normal function, must be used with Captial Letter. 
Will return a JSX Component

InterviewQ : Component Composition: is placing one component into another component. 

React sanitizes JS data in {} to prevent cross site scripting attacks! 

JSX makes your React code readable. 

Episode 4

Planning first for app. 
-what are you going to build? How will it look? UI Design 

Low level planning; Components: 

Header, 
  - Logo 
  - Nav Items 
Body, 
  - Search 
  - Restaurant container 
    ** RestaurantCard 
     *** Img 
     *** Name of Res, Star Rating, Cuisine, Delivery Time 
Footer components 
  - Copyright 
  - Links 
  - Address 
  - Contact 

The beauty of JSX, we can write CSS like script, by writing a JS object, with css properties. Inline css is possible in JSX. 

Passing a prop to a component is just like passing an argument to a function! 

Props in a JS object. 

Config Driven UI: 
Website that is driven by data( configs). 

Destructuring of props is possible on the fly or separately. 
const { A, B, C} = props; 

You always have to give a unique key to each component when looping through them.(MAP) 
It takes a big performance hit if you dont write keys. 
Never use indexes as keys! according to React official documentation 

This is episode 5

You must use a unique key when using MAP to identify each loop. 
Dont use indexes as per React official documentation. 

Never keep hard coded data in components file. 

Two types of export/import

Default

export default<nameofComponent>;
import <nameofComponent> from  "path";

Named

export const <nameofComponent>
import {<nameofComponent>} from "path"; 

Can I use a default export along with named export? 

A file can only have one default export, but it can have numerous named exports!

React is fast in DOM manipulation. 
If you have to keep Data and UI layer consistent that is when React?angular framework come in hand. 
React is fast because it can do efficient DOM manipulation, due to virtual DOM. 

Normal JS variable but if you give the same variable superpowers, it will become a super energetic react variable. 

REACT HOOK 

Super powerful variable is called State Variable. 
State is a keyword. 
For creation of state variable we use React Hooks. 

(React element is a plain JS object. )

React hook is a normal JS function, given to us by React, prebuilt. The only thing is that function comes with prewritten super powers, it has utility function, that has logic in the background, written by FB developers. 

There are multiple React hooks. 
There are two important hooks : 
-useState() - used to generate super powerful variables in react
-useEffect() 

import useState from react! as named import 

Whenever a state variable changes, react will re-render my component. 
This feature is the reason react is the most popular library. 

-Reconciliation Algorithim ( React Fiber) 

Virtual DOM is represenation of actual DOM. = normal JS Object 

-Diff Algorithim 
Finds out the difference between two virtual DOMs,
it will calculate the difference and update the actual DOM on every render cycle. 

React is fast is because it has a virtual DOM, and a Diff algorithim. 

This is Episode 6 

Monolithic Architecture:

Micro Service Architecture:
Different services for different jobs, known as separation of concerns and is based on single responsibility principles. 
There are different connections between these services. 

All the services are run on their own ports. All these ports are mapped to domain name. 

Two Approaches of how data is fetched from back-end 

1) Page loads - make API call - then render to UI 

2) As soon as page loads - we will render a UI - make API call - populate, rerender with new data 

In React we will always use second approach. Better UX. 

Shimmer UI for better user experience 

Episode 7

useEffect is called after every render of the component. 
The dependency array changes the behaviour of the useEffect. 

* When you useEffect, without dependency array, it will be called on every component render. 

* If the dependency array is empty =[] then useEffect is called on only initial render. 

* If we put something inside the dependency array, it will only be called when the dependency changes. 

(It always comes on initial render)

Never put useEffect outside of a component. 
The purpose of useEffect is to create a local variable inside a component. Try to call useState at the top of the component to avoid inconsistency. Never use a useState hook inside an if else clause as it can create inconsistencies in the programme. Never create a stateVariable inside a for loop or function. 

React Router Package for routing
(react-router-dom)

First create routing configuration. {createBrowserRouter } from "react-router-dom";
Tell the configuration what will happen when you call a certain location. 
Import Router provider so that we can share our configuration with the app itself. 

React-error-dom gives us an access to an important error Hook. 
useRouteError - this will give more information about the error. 

How to tell something is a hook? 
Any function that begins with 'use....' is a hook. 

React-router-dom also provides us with Outlet component to tunnel the children path to the display.

When using React, never ever use an anchor tag <a> to redirect, because it causes the whole page to refresh. Use Link from react router dom. 
This is why React is known as a single page application. Everything is a component and it is the components that are being changed among themselves. 

Two Types of Routing in Web Apps
* Client Side Routing 
  All the components are already loaded in to the app - from the first time it loads. The different components are loaded to the UI, but no further network calls are made. 

* Server Side Routing 
   You have index.html, about.html, and anchor tag, it reloads the whole page, renders it on to UI. Makes a network call to the server. 

   // Speak while you code! 

   LET EXPLANATION 

   Let and const are local variables (block code). So when you're using the let,const then the variables you can't use global (outside of block) . But var is a global variable and you use anywhere in your code based on your decoration of var variables. 

 Also var allows the hosting technique. That means if you are accessing var variables before it deceleration. For example:- 
Console.log(a) ; 
Var a="varrr"; 
Then in the console you got the undefined. 
But let and const do not follow this hosting.if you try like this 
Console.log(a) ; 
Let a="let"; 
Then you get the error(not getting undefined). Let is stored in a temporary dead zone where  the js code reaches the let and const variables then only it's stored in temporary dead zone.

--------------------------------------------------------------------------------------------

Episode 8 
Class Based Components

A class based component is a normal JS class. 
We use key words 'extends React.Component' to tell React that it is a component. We have a render method inside the class that will return a piece of JSX code. 

React.Component is basically a React class and our class is inheriting properties from it. We need to import it from react. 

Always use this keyword to access props inside the class.

The 'super' keyword is used in classes to call the constructor or access the properties and methods of a parent(superclass)

Just like 'this' keyword refers to this object, the 'super' keyword refers to the parent of the object.  

We never modify our state variables directly in a class component, we will not equate it to some new value. 

Whenever a class is instantiated the constructor is called, then the render method is called. Then ComponentDidMount method is called once the component has been completely mounted. 

We use CompnentDidMount method to call API. So that React Component loads very fast, we load page then make API call to fill the data. We dont wait for the data to render the component as it will take too long to wait. 

React LifeCycle Diagram - 2 phazes "render phaze" and "commit phaze"
https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/ 
React will batch the different children's render phazes together as an optimisation(DOM updating is very expensive)! Then it will move on to the commit phaze which is also batched together.  

Never compare React's Life Cycle to Functional Component.

React is a single page application. SPA 
When you switch among the 'pages' it is not reloading the page, it is only changing the components. This is a CON. 

Episode 9 Custom Hooks 

Custom Hooks help our code to be more modular and readable. 
A hook is just a utility function. 

What is the contract of the hook? = what is the input and output.